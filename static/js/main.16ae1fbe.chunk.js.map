{"version":3,"sources":["components/List.js","components/Nav.js","App.js","serviceWorker.js","index.js"],"names":["List","props","react_default","a","createElement","list","map","e","i","key","es_button","type","ghost","icon","size","className","onClick","handleDeleteItem","FormItem","Form","Item","Nav","es_form","layout","onSubmit","handleAddItem","input","value","onChange","handleInput","htmlType","App","state","_this","setState","target","preventDefault","Object","toConsumableArray","concat","newList","slice","splice","Nav_Nav","this","List_List","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sSAIaA,SAAO,SAAAC,GAClB,OACEC,EAAAC,EAAAC,cAAA,UACGH,EAAMI,KAAKC,IAAI,SAACC,EAAGC,GAAJ,OACdN,EAAAC,EAAAC,cAAA,MAAIK,IAAKD,GACND,EACDL,EAAAC,EAAAC,cAACM,EAAA,EAAD,CACEC,KAAK,UACLC,OAAK,EACLC,KAAK,SACLC,KAAM,QACNC,UAAU,cACVC,QAAS,kBAAMf,EAAMgB,iBAAiBV,EAAGC,8BCZ/CU,EAAWC,IAAKC,KAETC,EAAM,SAAApB,GACjB,OACEC,EAAAC,EAAAC,cAAA,OAAKW,UAAW,OACdb,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAMC,OAAO,SAASC,SAAUvB,EAAMwB,eACpCvB,EAAAC,EAAAC,cAACc,EAAD,KACEhB,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAOf,KAAK,OAAOgB,MAAO1B,EAAM0B,MAAOC,SAAU3B,EAAM4B,eAEvD3B,EAAAC,EAAAC,cAACc,EAAD,KACIhB,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAQC,KAAK,UAAUC,OAAK,EAACkB,SAAS,UAAtC,gBCkCCC,6MA1CbC,MAAQ,CACNN,MAAO,GACPrB,KAAM,MAERwB,YAAc,SAAAtB,GACZ0B,EAAKC,SAAS,CACZR,MAAOnB,EAAE4B,OAAOR,WAGpBF,cAAgB,SAAAlB,GACdA,EAAE6B,iBACFH,EAAKC,SAAS,CACZR,MAAO,GACPrB,KAAKgC,OAAAC,EAAA,EAAAD,CAAKJ,EAAKD,MAAM3B,MAAjBkC,OAAA,CAAuBN,EAAKD,MAAMN,aAG1CT,iBAAmB,SAACV,EAAGC,GACrB,IAAIgC,EAAUP,EAAKD,MAAM3B,KAAKoC,QAC9BD,EAAQE,OAAOlC,EAAG,GAClByB,EAAKC,SAAS,CACZ7B,KAAMmC,6EAIR,OACEtC,EAAAC,EAAAC,cAAA,OAAKW,UAAU,OACbb,EAAAC,EAAAC,cAAA,UAAQW,UAAU,cAChBb,EAAAC,EAAAC,cAACuC,EAAD,CACEd,YAAae,KAAKf,YAClBJ,cAAemB,KAAKnB,cACpBE,MAAOiB,KAAKZ,MAAMN,QAEpBxB,EAAAC,EAAAC,cAACyC,EAAD,CACExC,KAAMuC,KAAKZ,MAAM3B,KACjBY,iBAAkB2B,KAAK3B,4BAnCjB6B,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.16ae1fbe.chunk.js","sourcesContent":["import React from \"react\";\nimport { Button } from \"antd\";\nimport \"antd/dist/antd.css\";\n\nexport const List = props => {\n  return (\n    <ul>\n      {props.list.map((e, i) => (\n        <li key={i}>\n          {e}\n          <Button\n            type=\"primary\"\n            ghost\n            icon=\"delete\"\n            size={\"small\"}\n            className=\"list-button\"\n            onClick={() => props.handleDeleteItem(e, i)}\n          />\n        </li>\n      ))}\n    </ul>\n  );\n};\n","import React from \"react\";\nimport { Button, Form, Input } from \"antd\";\nimport \"antd/dist/antd.css\";\n\nconst FormItem = Form.Item;\n\nexport const Nav = props => {\n  return (\n    <div className={'nav'}>\n      <Form layout=\"inline\" onSubmit={props.handleAddItem}>\n        <FormItem>\n          <Input type=\"text\" value={props.value} onChange={props.handleInput} />\n        </FormItem>\n          <FormItem>\n              <Button type='primary' ghost htmlType=\"submit\">Add item</Button>\n          </FormItem>\n      </Form>\n    </div>\n  );\n};\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { List } from \"./components/List\";\nimport { Nav } from \"./components/Nav\";\n\nclass App extends Component {\n  state = {\n    input: \"\",\n    list: []\n  };\n  handleInput = e => {\n    this.setState({\n      input: e.target.value\n    });\n  };\n  handleAddItem = e => {\n    e.preventDefault();\n    this.setState({\n      input: \"\",\n      list: [...this.state.list, this.state.input]\n    });\n  };\n  handleDeleteItem = (e, i) => {\n    let newList = this.state.list.slice();\n    newList.splice(i, 1);\n    this.setState({\n      list: newList\n    });\n  };\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Nav\n            handleInput={this.handleInput}\n            handleAddItem={this.handleAddItem}\n            value={this.state.input}\n          />\n          <List\n            list={this.state.list}\n            handleDeleteItem={this.handleDeleteItem}\n          />\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}